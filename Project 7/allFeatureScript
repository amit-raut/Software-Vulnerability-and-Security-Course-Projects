#!/usr/bin/env python

__author__ = 'AR'

import os, hashlib, json
from collections import Counter
from scipy.spatial.distance import jaccard
import scipy.cluster.hierarchy as sch
import matplotlib.pyplot as plt

def getUniqSysCalls(straceFile):
    with open(straceFile) as file:
        syscalls = [ln.split('(', 1)[0] for ln in file if (ln.find('(') != -1)]

        return syscalls

universalSetofFeatures = []
featureList = []
featureSetLength = 5

def main():
    files = [x for x in os.listdir('/home/currentanalyst/007/') if x.endswith('.txt')]
    for f in files:
        strace = os.path.join('/home/currentanalyst/007/',f)
        featureList.append(getUniqSysCalls(strace))

    #print featureList[0]
    # print universalSetofFeatures each with 5 syscalls
    featureSet = []
    for feature in featureList:
        featureSet.append(returnFeatureSet(feature))

    configDict = {"config" : featureSet}
    with open('/home/currentanalyst/prset07/myConfig.json', 'w') as f:
        json.dump(configDict, f)

    finalSet = []
    for f1 in featureSet:
        for f in f1:
            finalSet.append(f)

    # print finalSet, len(finalSet)
    #final Feature Set for all samples Total 431 unique features :)
    newList = []
    for i in finalSet:
        if i not in newList:
            newList.append(i)

    #Calculate Feature matrix for all samples 824 x 431
    # distanceMatrix = []
    # for feature in featureList:
    #     distanceMatrix.append(calculateDistanceMatrix(newList, feature))
    #
    #
    # #Call Jacccard distance calculator to get back the array with pairwise jaccard distances for samples
    # pairwiseDistances = calculateJaccardDistance(distanceMatrix)
    #
    # dendrogram = generateDendrogram(pairwiseDistances)
    # # print dendrogram
    # # for item in pairwiseDistances:
    # #     print item
    #  # print newList, len(newList)

    # m = hashlib.sha1()
    # featureHashes = []
    #
    # #Creating SHA1 hash for all the feature set
    # for list in newList:
    #     m.update(str(list))
    #     featureHashes.append(m.hexdigest())



    # print featureHashes, len(featureHashes)

def generateDendrogram(matrix):
    clusters = sch.linkage(matrix,method='complete')
    plt.subplot(1,2,1)
    plt.title("Set of Most Likely Clusters")
    plt.show()
    dist_mat = matrix
    den = sch.dendrogram(clusters)
    print clusters
    return den


    #Calculate the jaccord distance for pair of malware samples using scipy
def calculateJaccardDistance(distanceMatrix):
    returnArray = []
    tempArray = []
    j = 0
    for index in range(len(distanceMatrix)):
        for index2 in range(1, len(distanceMatrix)):
            j = jaccard(distanceMatrix[index], distanceMatrix[index2])
            tempArray.append(round(j, 2))
        returnArray.append(tempArray)
        tempArray = []
    return returnArray



def calculateDistanceMatrix(newList, featureList):
    #Finding Distance matrix for all samples
    matrixList = []
    for index in range(len(newList)):
        if newList[index] in returnFeatureSet(featureList):
            matrixList.append(1)
        else:
            matrixList.append(0)
    return matrixList



def returnFeatureSet(featureList):
    returningSet = []
    for index in range(0, len(featureList) - featureSetLength, 3):
        # print featureList[0][index: index + featureSetLength], index
        returningSet.append(featureList[index: index + featureSetLength])
    return returningSet



if __name__ == '__main__':
    main()

