#!/usr/bin/env python


__author__ = 'AR'

import os, sys, json
import os, hashlib
from collections import Counter
from scipy.spatial.distance import jaccard
import scipy.cluster.hierarchy as sch
import matplotlib.pyplot as plt

featureSetLength = 5

if len(os.sys.argv) < 2:
    print 'Usage: ./cluster [<path_to_Configuration_File>]'
    os.sys.exit()

configFilePath = os.sys.argv[1]

def returnFeatureSet(featureList):
    returningSet = []
    for index in range(0, len(featureList) - featureSetLength, 3):
        # print featureList[0][index: index + featureSetLength], index
        returningSet.append(featureList[index: index + featureSetLength])
    return returningSet


def calculateJaccardDistance(distanceMatrix):
    returnArray = []
    tempArray = []
    j = 0
    for index in range(len(distanceMatrix)):
        for index2 in range(1, len(distanceMatrix)):
            j = jaccard(distanceMatrix[index], distanceMatrix[index2])
            tempArray.append(round(j, 2))
        returnArray.append(tempArray)
        tempArray = []
    return returnArray



def calculateDistanceMatrix(newList, featureList):
    #Finding Distance matrix for all samples
    matrixList = []
    for index in range(len(newList)):
        if newList[index] in returnFeatureSet(featureList):
            matrixList.append(1)
        else:
            matrixList.append(0)
    return matrixList


def generateDendrogram(matrix):
    clusters = sch.linkage(matrix,method='complete')
    plt.subplot(1,2,1)
    plt.title("Set of Most Likely Clusters")
    plt.show()
    dist_mat = matrix
    den = sch.dendrogram(clusters)
    print clusters
    return den


def main():

    with open(configFilePath, 'r') as f:
        j = json.load(f)
        parent = j["config"]

    sf = []
    for item in parent:
        for i in item:
            sf.append(i)
    # print len(sf)

    #Unique 431 features from universal set of 28148 features
    newSF = []
    for i in sf:
        if i not in newSF:
            newSF.append(i)


    # print newSF[0], parent[0][0]
    count = 0
    tempArray = []
    finalArray = []
    for j in newSF:
        for index in range(len(parent)):
            if j in parent[index]:
                if index < 10:
                        a =  '000' + str(index)
                elif index < 100:
                        a =  '00' + str(index)
                else:
                        a =  '0' + str(index)
                tempArray.append(a)
        finalArray.append(tempArray)
        tempArray = []

    exportDict = {"cluster": finalArray}

    with open('/home/currentanalyst/prset07/clusters.json', 'w') as f:
        json.dump(exportDict, f)

    #Calculate Feature matrix for all samples 824 x 431
    distanceMatrix = []
    for feature in parent:
        distanceMatrix.append(calculateDistanceMatrix(newSF, feature))
    
    #Call Jacccard distance calculator to get back the array with pairwise jaccard distances for samples
    pairwiseDistances = calculateJaccardDistance(distanceMatrix)
    
    #Generate Dendrogram
    dendrogram = generateDendrogram(pairwiseDistances)
    
    m = hashlib.sha1()
    featureHashes = []
    
    #Creating SHA1 hash for all the feature set
    for list in newSF:
        m.update(str(list))
        featureHashes.append(m.hexdigest())


if __name__ == '__main__':
    print '#' * 10 + ' Malware Analysis And Triage ' + '#' * 10
    main()
    print
    print 'EOP'