#!/usr/bin/env python

__author__ = 'AR'

import os, sys, math, random, subprocess, time, hashlib

if len(os.sys.argv) < 3:
    print """
Usage: ./fuzz [$init_config_value] [<PDF Input File>]
init_config_value     : a random 32 bit unsigned integer [Value from 0 to 2^32 - 1 (i.e. 0 to 4,294,967,295)]
"""
    os.sys.exit()


app = "/usr/bin/pdftotext"
seed = int(sys.argv[1])
inFile = str(sys.argv[2])
fuzzing = 250
testCases = 10000
outFile = "/home/currentanalyst/prset06/fuzzer/outFile.pdf"

def fuzzIt():
    for i in range(seed, testCases):
        
        pdfByteArray = bytearray(open(inFile, 'rb').read())
        random.seed(i)

        bytesToFlip = random.randrange(math.ceil((float(len(pdfByteArray)) / fuzzing))) + 1

        for j in range(bytesToFlip):
            changeByte = random.randrange(256)
            index1 = random.randrange(len(pdfByteArray))
            pdfByteArray[index1] = changeByte


        open(outFile, 'wb').write(pdfByteArray)

        appProcess = subprocess.Popen([app, outFile], stdout = subprocess.PIPE,stderr = subprocess.PIPE)
        time.sleep(1)

        hasCrashed = appProcess.poll()
        if hasCrashed:
		if hasCrashed == -11: 
           		print "App Crashed", 
           		print appProcess.returncode, appProcess.stderr, i
          
        else:
           appProcess.terminate()

def getDeterministicInput(seed, hashFunction):
    if hashFunction == "md5":
        msg = hashlib.md5()
        msg.update(str(seed))
        return msg.hexdigest()

    elif hashFunction == "sha1":
        msg = hashlib.sha1()
        msg.update(str(seed))
        return msg.hexdigest()

def strxor(a, b):     # xor two strings of different lengths
    if len(a) > len(b):
        return "".join([chr(ord(x) ^ ord(y)) for (x, y) in zip(a[:len(b)], b)])
    else:
        return "".join([chr(ord(x) ^ ord(y)) for (x, y) in zip(a, b[:len(a)])])

if __name__ == '__main__':
  print
  retvalue = os.system('ulimit -c unlimited')
  print "#" * 10 + " Fuzzing " + app + " " + "#" * 10
  #print retvalue
  fuzzIt()
