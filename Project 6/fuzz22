#!/usr/bin/env python

__author__ = 'AR'

import subprocess
import os, hashlib, random, time, math

#if len(os.sys.argv) < 3:
#    print """
#Usage: ./fuzz [$init_config_value] [<PDF Input File>]
#init_config_value     : a random 32 bit unsigned integer [Value from 0 to 2^32 - 1 (i.e. 0 to 4,294,967,295)]
#"""
#    os.sys.exit()

app = "pdftotext"
seed = int(os.sys.argv[1])
inFile = str(os.sys.argv[2])
outFile = "/home/currentanalyst/prset06/fuzzer/outFile.pdf"
txtOutFile = "/home/currentanalyst/prset06/fuzzer/txtOutFile"
crashDump = "/home/currentanalyst/prset06/fuzzer/crashDump"
inFileSize = os.path.getsize(inFile)
frame = 250
multiplier = 1

def fuzzIt(app, seed, inFile, outFile, crashDump):
  for index in range(0, 10000):    
    pdfBytesArray = bytearray(open(inFile, 'rb').read())
    random.seed(index) #seed
    bitFlips = random.randrange(math.ceil((float(len(pdfBytesArray)) / frame))) + 1

    for j in range(bitFlips):
        changeByte = random.randrange(256)
        index1 = random.randrange(len(pdfBytesArray))
        pdfBytesArray[index1] = changeByte

	#fuzzInput = getDeterministicInput(index, "md5")
        #frame = str(fuzzInput).__len__()
        #print fuzzInput, str(fuzzInput).__len__()

        #Change part of the pdfArrayBytes with md5 hash generated from the init_config_value
        #for index in range(0, pdfBytesArray.__len__() - frame * multiplier, frame):
	#pdfBytesArray[index: index + frame * multiplier] = str(fuzzInput) * multiplier
                
		# Creating new file with deterministic input
		#open(outFile, 'wb').write(pdfBytesArray)
            
	#xoredArray = strxor(str(fuzzInput), str(pdfBytesArray))
	open(outFile, 'wb').write(pdfBytesArray)
	
	#print 'ReturnValue: ' + str(retvalue)        

	# Creating a subprocess to test the application
	appProcess = subprocess.Popen([app, outFile, txtOutFile], stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        time.sleep(1)
	hasCrashed = appProcess.poll()

	if hasCrashed:
		#if hasCrashed == -11:
			print "Program Crashed.", str(hasCrashed), appProcess.returncode
			print appProcess.stderr, appProcess.returncode
	else:
               	#print "Program Exited Normally."
		appProcess.terminate()


def getDeterministicInput(seed, hashFunction):
    if hashFunction == "md5":
        msg = hashlib.md5()
        msg.update(str(seed))
        return msg.hexdigest()

    elif hashFunction == "sha1":
        msg = hashlib.sha1()
        msg.update(str(seed))
        return msg.hexdigest()

def strxor(a, b):     
    if len(a) > len(b):
        return "".join([chr(ord(x) ^ ord(y)) for (x, y) in zip(a[:len(b)], b)])
    else:
        return "".join([chr(ord(x) ^ ord(y)) for (x, y) in zip(a, b[:len(a)])])
    

if __name__ == '__main__':
	print 
	#retvalue = subprocess.Popen('ulimit -c unlimited', stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        retvalue = os.system('ulimit -c unlimited')
	print "#" * 10 + " Fuzzing " + app + " " + "#" * 10
        print retvalue
        fuzzIt(app, seed, inFile, outFile, crashDump)

